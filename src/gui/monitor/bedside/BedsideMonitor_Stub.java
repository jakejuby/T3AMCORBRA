// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package gui.monitor.bedside;

public final class BedsideMonitor_Stub
    extends java.rmi.server.RemoteStub
    implements monitor.shared.DataProvider, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_getSensors_0;
    private static java.lang.reflect.Method $method_subscribe_1;
    
    static {
	try {
	    $method_getSensors_0 = monitor.shared.DataProvider.class.getMethod("getSensors", new java.lang.Class[] {});
	    $method_subscribe_1 = monitor.shared.DataProvider.class.getMethod("subscribe", new java.lang.Class[] {java.util.Map.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public BedsideMonitor_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of getSensors()
    public java.util.List getSensors()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getSensors_0, null, -1808744821566491957L);
	    return ((java.util.List) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of subscribe(Map)
    public void subscribe(java.util.Map $param_Map_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_subscribe_1, new java.lang.Object[] {$param_Map_1}, 104846727687803349L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
