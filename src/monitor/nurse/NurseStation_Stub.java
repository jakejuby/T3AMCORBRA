// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package monitor.nurse;

public final class NurseStation_Stub
    extends java.rmi.server.RemoteStub
    implements monitor.shared.DataReceiver, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_addDataProvider_0;
    private static java.lang.reflect.Method $method_clearAlarm_1;
    private static java.lang.reflect.Method $method_dataUpdate_2;
    private static java.lang.reflect.Method $method_setAlarm_3;
    
    static {
	try {
	    $method_addDataProvider_0 = monitor.shared.DataReceiver.class.getMethod("addDataProvider", new java.lang.Class[] {java.lang.String.class, monitor.shared.DataProvider.class});
	    $method_clearAlarm_1 = monitor.shared.DataReceiver.class.getMethod("clearAlarm", new java.lang.Class[] {java.lang.String.class});
	    $method_dataUpdate_2 = monitor.shared.DataReceiver.class.getMethod("dataUpdate", new java.lang.Class[] {java.lang.String.class, java.util.Map.class});
	    $method_setAlarm_3 = monitor.shared.DataReceiver.class.getMethod("setAlarm", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public NurseStation_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of addDataProvider(String, DataProvider)
    public void addDataProvider(java.lang.String $param_String_1, monitor.shared.DataProvider $param_DataProvider_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_addDataProvider_0, new java.lang.Object[] {$param_String_1, $param_DataProvider_2}, -2803511939570864058L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of clearAlarm(String)
    public void clearAlarm(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_clearAlarm_1, new java.lang.Object[] {$param_String_1}, 6558299499417425822L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of dataUpdate(String, Map)
    public void dataUpdate(java.lang.String $param_String_1, java.util.Map $param_Map_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_dataUpdate_2, new java.lang.Object[] {$param_String_1, $param_Map_2}, -8646943945399594861L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setAlarm(String, String)
    public void setAlarm(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setAlarm_3, new java.lang.Object[] {$param_String_1, $param_String_2}, -7541539834261626921L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
